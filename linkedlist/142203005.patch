diff --git a/kalloc.c b/kalloc.c
index 14cd4f4..ffce124 100644
--- a/kalloc.c
+++ b/kalloc.c
@@ -1,20 +1,17 @@
-// Physical memory allocator, intended to allocate
-// memory for user processes, kernel stacks, page table pages,
-// and pipe buffers. Allocates 4096-byte pages.
-
 #include "types.h"
 #include "defs.h"
 #include "param.h"
 #include "memlayout.h"
 #include "mmu.h"
 #include "spinlock.h"
+#include <stddef.h> // Include <stddef.h> for NULL
 
 void freerange(void *vstart, void *vend);
-extern char end[]; // first address after kernel loaded from ELF file
-                   // defined by the kernel linker script in kernel.ld
+extern char end[]; // First address after kernel loaded from ELF file, defined by the kernel linker script in kernel.ld
 
 struct run {
-  struct run *next;
+  struct run *prev; // Pointer to previous free frame
+  struct run *next; // Pointer to next free frame
 };
 
 struct {
@@ -23,11 +20,11 @@ struct {
   struct run *freelist;
 } kmem;
 
-// Initialization happens in two phases.
+// Initialization happens in two phases:
 // 1. main() calls kinit1() while still using entrypgdir to place just
-// the pages mapped by entrypgdir on free list.
+//    the pages mapped by entrypgdir on free list.
 // 2. main() calls kinit2() with the rest of the physical pages
-// after installing a full page table that maps them on all cores.
+//    after installing a full page table that maps them on all cores.
 void
 kinit1(void *vstart, void *vend)
 {
@@ -51,7 +48,7 @@ freerange(void *vstart, void *vend)
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
     kfree(p);
 }
-//PAGEBREAK: 21
+
 // Free the page of physical memory pointed at by v,
 // which normally should have been returned by a
 // call to kalloc().  (The exception is when
@@ -64,14 +61,30 @@ kfree(char *v)
   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
     panic("kfree");
 
-  // Fill with junk to catch dangling refs.
+  // Fill with junk to catch dangling references.
   memset(v, 1, PGSIZE);
 
   if(kmem.use_lock)
     acquire(&kmem.lock);
   r = (struct run*)v;
+  
+  // Update pointers in the adjacent nodes.
+  if (r->prev)
+    r->prev->next = r->next;
+  if (r->next)
+    r->next->prev = r->prev;
+  
+  // Update the freelist if the node being freed is the head.
+  if (r == kmem.freelist)
+    kmem.freelist = r->next;
+
+  // Insert the freed node at the beginning of the list.
   r->next = kmem.freelist;
+  r->prev = NULL;
+  if (kmem.freelist)
+    kmem.freelist->prev = r;
   kmem.freelist = r;
+  
   if(kmem.use_lock)
     release(&kmem.lock);
 }
@@ -87,8 +100,12 @@ kalloc(void)
   if(kmem.use_lock)
     acquire(&kmem.lock);
   r = kmem.freelist;
-  if(r)
+  if(r) {
+    // Remove the allocated node from the list.
     kmem.freelist = r->next;
+    if (kmem.freelist)
+      kmem.freelist->prev = NULL;
+  }
   if(kmem.use_lock)
     release(&kmem.lock);
   return (char*)r;
